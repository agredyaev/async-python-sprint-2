from typing import Protocol, runtime_checkable

from collections.abc import Generator
from datetime import datetime
from uuid import UUID

from src.schemas import TaskState


@runtime_checkable
class StateManagerProtocol(Protocol):
    def save_state(self) -> Generator[None, None, None]: ...
    def load_state(self) -> Generator[None, None, None]: ...
    def update_task_state(self, task_id: UUID, state: TaskState) -> Generator[None, None, None]: ...
    def get_task_state(self, task_id: UUID) -> Generator[None, None, TaskState]: ...
    def cleanup_states(self, older_than: datetime) -> Generator[None, None, None]: ...
