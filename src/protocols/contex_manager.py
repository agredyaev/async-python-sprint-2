from typing import Protocol, runtime_checkable

from collections.abc import Generator
from uuid import UUID

from src.schemas import Context


@runtime_checkable
class ContextManagerProtocol(Protocol):
    """Protocol defining context management interface."""

    def create_context(self, pipeline_id: UUID | None = None) -> Generator[Context, None, None]: ...
    def get_context(self, task_id: UUID) -> Context: ...
    def update_context(self, context: Context) -> Generator[None, None, None]: ...
    def cleanup_context(self, pipeline_id: UUID) -> Generator[None, None, None]: ...
    def merge_contexts(self, source: Context, target: Context) -> Generator[Context, None, None]: ...
    def associate_task(self, task_id: UUID, context_id: UUID) -> Generator[None, None, None]: ...
